!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

# Downloding data from kaggle
!kaggle datasets download -d anirudhcv/labeled-optical-coherence-tomography-oct

import zipfile
zip_ref = zipfile.ZipFile('/content/labeled-optical-coherence-tomography-oct.zip','r')
zip_ref.extractall('/content')
zip_ref.close()
zip_ref.close()

import os
import numpy as np
import cv2
import tensorflow
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, MaxPooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

train_dir = "/content/Dataset - train+val+test/train"
test_dir = "/content/Dataset - train+val+test/test"
val_dir = "/content/Dataset - train+val+test/val"

#data preprocessing
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=18,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.12,
    zoom_range=0.17,
    horizontal_flip=True
)
val_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.15,
    zoom_range=0.15,
    horizontal_flip=True
)

test_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
    )


# Load the ResNet-50 model
base_model = ResNet50(weights=None, include_top=False, input_shape=(224, 224, 1))


x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
x = Dropout(0.6)(x)
predictions = Dense(4, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)

# Freeze the pre-trained layers
for layer in base_model.layers[:-20]:
    layer.trainable = False



model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

from tensorflow.keras.callbacks import EarlyStopping
early_stopping = EarlyStopping(monitor='val_accuracy', patience=5)

model.fit_generator(
    train_generator,
    validation_data = validation_generator,
    epochs= 10)
# Save the trained model
model.save('resnet50_grayscale.h5')
